= acts_as_current

This library extends ActiveRecord classes so they can carry a reference to the 
instance defined as current for the given request.



== Usage

<tt>acts_as_current</tt> can be applied to any model, but it's most common use case is 
storing the authenticated user on the corresponding User model.  Doing so allows other models 
and observers to access information about the user who made the request.  This is particularly 
useful for auditing, versioning, etc.

Here's how you'd set up the user example.  

First, extend the User model.

    class User < ActiveRecord::Base
        acts_as_current
    end
	

Then, tell your application controller to set the current user before all requests. (The controller 
method can obviously be anything you want. Here, we use <tt>:current_user</tt> because that's our 
convention at Coroutine.)

    class ApplicationController < ActionController::Base
        
        before_filter { |controller| User.current = controller.send(:current_user) }

        def current_user
            # return user or nil
        end
    end


Finally, in your observer, you can retrieve the value of current_user by using the accessor mixed 
into the model class.

    class AuditObserver < ActiveRecord::Observer
        observe :account, :balance

        def after_update(record)
            AuditTrail.new({ :record => record, :action => :update, :whodunnit => User.current })
        end
    end
	


== Simple Controller Recipe

He's an example of how you might set a current instance on a User class via a 
current_user method, using a before filter in the application controller.

    before_filter { |controller| User.current = controller.send(:current_user) }



== Why Doesn't the Library Handle the Controller Logic For Me?

Primarily, because we think ActiveRecord extensions have no business altering
controller logic.  Doing so couples aspects of your application that Rails is going 
out of its way to separate.

But also because the before_filter syntax is already configurable and extremely expressive. 
Writing the before filter is no harder than writing a module include statement, but the former 
tells a code maintainer <b>considerably</b> more information than the latter.

In summary, suck it up and write the controller code yourself. :-) 



== Design Notes

<tt>acts_as_current</tt> uses the hash Thread.current to store the current value for each class
extended by the library.  Many consider this technique a hack, but for now, it is the only thread 
safe way to store such data.  By coding the technique as a model extension, <tt>acts_as_current</tt> 
abstracts reads and writes against Thread.current, greatly reducing the likelihood of 
conflicts and errors.  

We think the real benefits outweigh the perceived risks.



== Helpful Links

* <b>Repository:</b> http://github.com/coroutine/acts_as_current
* <b>Gem:</b> http://rubygems.org/gems/acts_as_current
* <b>Authors:</b> http://coroutine.com



== Installation (Rails 3)

Install me from RubyGems.org by adding a gem dependency to your Gemfile.  Bundler does 
the rest.

	gem "acts_as_current"
	
	$ bundle install



== Installation (Rails 2)

Install me from RubyGems.org and add a gem dependency in your configuration file.

    $ sudo gem install acts_as_current

Or install me as a plugin.

    $ script/plugin install git://github.com/coroutine/acts_as_current.git
	


== Gemroll

Other gems by Coroutine include:

* {acts_as_label}[http://github.com/coroutine/acts_as_label]
* {acts_as_list_with_sti_support}[http://github.com/coroutine/acts_as_list_with_sti_support]
* {delayed_form_observer}[http://github.com/coroutine/delayed_form_observer]
* {kenny_dialoggins}[http://github.com/coroutine/kenny_dialoggins]
* {michael_hintbuble}[http://github.com/coroutine/michael_hintbuble]
* {tiny_navigation}[http://github.com/coroutine/tiny_navigation]



== License

Copyright (c) 2010 {Coroutine LLC}[http://coroutine.com].

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

acts_as_current was inspired by sentient_user, copyright (c) 2009 bokmann, also released under the 
MIT license.